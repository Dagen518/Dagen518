{
  "_comment1": "Any long-format command line argument ",
  "_comment2": "may be used in this JSON configuration file",

  "url": "stratum+tcps://eu.flockpool.com:5555",
  
  "_comment3": "Backup/failover stratum used in case of connection problems",
  "url-backup": "stratum+tcps://us-west.flockpool.com:5555",

  "user": "RUR52mSqiAQKy5ZCs5PSotvoHcAazyxE9U.Dagen",
  "pass": "kunda59202",

  "algo": "gr",
  "threads": 0,

  "_comment4": "tune-full takes longer but should provide better hashrate",
  "tune-full": true,

  "_comment5": "You can specify different name/location for your tune config",
  "tune-config": "tune_config",

  "_comment6": "You can force miner to not tune. It tunes by default",
  "_comment7": "Or force it even if tune-config file already exists",
  "no-tune": false,
  "force-tune": false,

  "_comment8": "\"log\": \"filename\" can be used to create logfile of output",
  "benchmark": false,
  "stress-test": false,
  "quiet": false
}

@echo off
@SetLocal EnableExtensions
@SetLocal EnableDelayedExpansion
@cd /d "%~dp0"

set CPU_INST=

REM Add proper binary instruction set in INST_OVERRIDE to force use those binaries.
REM To check whichi ones are avaliable refer to readme.txt or use program like CPU-Z. 
REM Binaries: sse2 sse42 aes-sse42 avx avx2 zen zen2 zen3 avx512 avx512-sha avx512-sha-vaes
set INST_OVERRIDE=
if NOT "%INST_OVERRIDE%" == "" (
  call :RunOverride %INST_OVERRIDE% "User Defined"
)

echo Detecting CPU

where wmic 1>NUL 2>NUL

if %ERRORLEVEL% EQU 0 (

  for /f "tokens=1 delims=" %%a in ('wmic cpu get Manufacturer') do for %%b in (%%a) do set MANUFACTURER=%%a
  for /f "tokens=1 delims=" %%a in ('wmic cpu get Caption') do for %%b in (%%a) do set CPUCAPTION=%%a
  for /f "tokens=1 delims=" %%a in ('wmic cpu get Description') do for %%b in (%%a) do set CPUDESCRIPTION=%%a

) else (

  for /f "tokens=1 delims=" %%a in ('PowerShell -Command "Get-WmiObject -Class Win32_Processor -ComputerName . | Select-Object -Property Manufacturer"') do for %%b in (%%a) do set MANUFACTURER=%%a
  for /f "tokens=1 delims=" %%a in ('PowerShell -Command "Get-WmiObject -Class Win32_Processor -ComputerName . | Select-Object -Property Caption"') do for %%b in (%%a) do set CPUCAPTION=%%a
  for /f "tokens=1 delims=" %%a in ('PowerShell -Command "Get-WmiObject -Class Win32_Processor -ComputerName . | Select-Object -Property Description"') do for %%b in (%%a) do set CPUDESCRIPTION=%%a

)

call :Trim MANUFACTURER !MANUFACTURER!
call :Trim CPUCAPTION !CPUCAPTION!
call :Trim CPUDESCRIPTION !CPUDESCRIPTION!

echo Detected Unknown CPU - !MANUFACTURER!
echo Detected CPU Caption - !CPUCAPTION!
echo Detected CPU Description - !CPUDESCRIPTION!

set /a CPU_FAMILY=0
set /a CPU_MODEL=0

set /a TYPE=0
for %%a in (!CPUCAPTION!) do (
  if !TYPE! equ 1 (
    set /a CPU_FAMILY="%%a"
    set /a TYPE=0
  )
  if !TYPE! equ 2 (
    set /a CPU_MODEL="%%a"
    set /a TYPE=0
  )
  if /I "%%a" == "Family" ( set /a TYPE=1 )
  if /I "%%a" == "Model" ( set /a TYPE=2 )
)
set USE_UNKNOWN=sse2


REM MANUFACTURER -> Manufacturer of the CPU. GenuineIntel or AuthenticAMD
REM CPU_FAMILY & CPU_MODEL can be used to determine instruction set.
echo Detected CPU Family: !CPU_FAMILY!
echo Detected CPU Model:  !CPU_MODEL!

REM Detected Intel
if /I !MANUFACTURER! == GenuineIntel (
  echo Detected !MANUFACTURER! CPU
  if NOT !CPU_FAMILY! EQU 6 (
    echo Unknowsn CPU Family - !CPU_FAMILY!
    call :RunUnknown "Unknown Intel Family"
  )
  
  REM CPU family == 6 - Default Intel family of consumer and server CPUs.
  REM List of used CPU Model numbers taken from: https://en.wikichip.org/wiki/intel/cpuid
  REM Big Cores (Client)
  REM Alder Lake S, P
  if !CPU_MODEL! EQU 151 ( call :RunBinary avx2-sha-vaes "Alder Lake (C)" )
  if !CPU_MODEL! EQU 154 ( call :RunBinary avx2-sha-vaes "Alder Lake (C)" )
  REM Rocket Lake S
  if !CPU_MODEL! EQU 167 ( call :RunBinary avx512-sha-vaes "Rocket Lake (C)" )
  REM Tiger Lake H, U
  if !CPU_MODEL! EQU 141 ( call :RunBinary avx512-sha-vaes "Tiger Lake (C)" )
  if !CPU_MODEL! EQU 140 ( call :RunBinary avx512-sha "Tiger Lake (C)" )
  REM Ice Lake U & Y
  if !CPU_MODEL! EQU 126 ( call :RunBinary avx512-sha-vaes "Ice Lake (C)" )
  if !CPU_MODEL! EQU 125 ( call :RunBinary avx512-sha-vaes "Ice Lake (C)" )
  REM Comet Lake S, H
  if !CPU_MODEL! EQU 165 ( call :RunBinary avx2 "Comet Lake (C)" )
  REM Comet Lake U & Amber Lake Y & Whiskey Lake U
  if !CPU_MODEL! EQU 142 ( call :RunBinary avx2 "Comet Lake & Amber Lake & Whiskey Lake (C)" )
  REM Cannon Lake U
  if !CPU_MODEL! EQU 102 ( call :RunBinary avx512-sha "Cannon Lake (C)" )
  REM Coffee Lake S, H, E & U
  if !CPU_MODEL! EQU 158 ( call :RunBinary avx2 "Coffee Lake (C)" )
  if !CPU_MODEL! EQU 142 ( call :RunBinary avx2 "Coffee Lake (C)" )
  REM Kaby Lake DT, H, S, X & Y, U
  if !CPU_MODEL! EQU 158 ( call :RunBinary avx2 "Kaby Lake (C)" )
  if !CPU_MODEL! EQU 142 ( call :RunBinary avx2 "Kaby Lake (C)" )
  REM Skylake (Client) DT, H, S & Y, U
  if !CPU_MODEL! EQU 94 ( call :RunBinary avx2 "Skylake (C)" )
  if !CPU_MODEL! EQU 78 ( call :RunBinary avx2 "Skylake (C)" )
  REM Broadwell (Client) C, W, H & U, Y, S
  if !CPU_MODEL! EQU 71 ( call :RunBinary avx2 "Broadwell (C)" )
  if !CPU_MODEL! EQU 61 ( call :RunBinary avx2 "Broadwell (C)" )
  REM Haswell (Client) GT3E & ULT & S
  if !CPU_MODEL! EQU 74 ( call :RunBinary avx2 "Haswell (C)" )
  if !CPU_MODEL! EQU 71 ( call :RunBinary avx2 "Haswell (C)" )
  if !CPU_MODEL! EQU 69 ( call :RunBinary avx2 "Haswell (C)" )
  if !CPU_MODEL! EQU 61 ( call :RunBinary avx2 "Haswell (C)" )
  if !CPU_MODEL! EQU 60 ( call :RunBinary avx2 "Haswell (C)" )
  REM Ivy Bridge (Client) M, H, Gladden
  if !CPU_MODEL! EQU 58 ( call :RunBinary avx "Ivy Bridge (C)" )
  REM Sandy Bridge (Client) M, H
  if !CPU_MODEL! EQU 42 ( call :RunBinary avx "Sandy Bridge (C)" )
  REM Westmere (Client) Arrandale, Clarkdale
  if !CPU_MODEL! EQU 37 ( call :RunBinary aes-sse42 "Westmere (C)" )
  REM Nehalem (Client) Auburndale, Havendale & Clarksfield
  if !CPU_MODEL! EQU 31 ( call :RunBinary sse42 "Nehalem (C)" )
  if !CPU_MODEL! EQU 30 ( call :RunBinary sse42 "Nehalem (C)" )
  
  REM Big Cores (Server)
  REM Sapphire Rapids
  if !CPU_MODEL! EQU 143 ( call :RunBinary avx512-sha-vaes "Sapphire Rapids (S)" )
  REM Ice Lake (Server) DE & SP
  if !CPU_MODEL! EQU 108 ( call :RunBinary avx512-sha-vaes "Ice Lake (S)" )
  if !CPU_MODEL! EQU 106 ( call :RunBinary avx512-sha-vaes "Ice Lake (S)" )
  REM Cooper Lake & Cascade Lake SP, X, W & Skylake (Server) SP, X, DE, W
  if !CPU_MODEL! EQU 85 ( call :RunBinary avx512 "Copper Lake & Cascade Lake & Skylake (S)" )
  REM Broadwell (Server) E, EP, EX & DE, Hewitt Lake
  if !CPU_MODEL! EQU 79 ( call :RunBinary avx2 "Broadwell & Hewitt Lake (S)" )
  if !CPU_MODEL! EQU 86 ( call :RunBinary avx2 "Broadwell & Hewitt Lake (S)" )
  REM Haswell (Server) E, EP, EX
  if !CPU_MODEL! EQU 63 ( call :RunBinary avx2 "Haswell (S)" )
  REM Ivy Bridge (Server) E, EN, EP, EX
  if !CPU_MODEL! EQU 62 ( call :RunBinary avx "Ivy Bridge (S)" )
  REM Sandy Bridge (Server) E, EN, EP
  if !CPU_MODEL! EQU 45 ( call :RunBinary avx "Sandy Bridge (S)" )
  REM Westmere (Server) Gulftown, EP & EX
  if !CPU_MODEL! EQU 44 ( call :RunBinary aes-sse42 "Westmere (S)" )
  if !CPU_MODEL! EQU 47 ( call :RunBinary aes-sse42 "Westmere (S)" )
  REM Nehalem (Server) EX & Lynnfield & Bloomfield, EP, WS
  if !CPU_MODEL! EQU 46 ( call :RunBinary sse42 "Nehalem (S)" )
  if !CPU_MODEL! EQU 30 ( call :RunBinary sse42 "Nehalem (S)" )
  if !CPU_MODEL! EQU 26 ( call :RunBinary sse42 "Nehalem (S)" )
  REM Penryn (Server) Dunnington & Harpertown, QC, Wolfdale, Yorkfield
  if !CPU_MODEL! EQU 29 ( call :RunBinary sse2 "Penryn (S)" )
  if !CPU_MODEL! EQU 23 ( call :RunBinary sse2 "Penryn (S)" )

  call :RunBinary sse2 "Generic"
)

REM Detected AMD
if /I !MANUFACTURER! == AuthenticAMD (
  echo Detected !MANUFACTURER! CPU
  if !CPU_FAMILY! EQU 25 (
    echo Detected Zen3 CPU
    call :RunBinary zen3 "Zen3"
  )

  if !CPU_FAMILY! EQU 24 (
    echo Detected Zen CPU
    call :RunBinary zen "Zen"
  )

  if !CPU_FAMILY! EQU 23 (
    REM Detect Zen2
    if !CPU_MODEL! EQU 144 ( call :RunBinary zen2 "Zen2" )
    if !CPU_MODEL! EQU 113 ( call :RunBinary zen2 "Zen2" )
    if !CPU_MODEL! EQU 104 ( call :RunBinary zen2 "Zen2" )
    if !CPU_MODEL! EQU 96 ( call :RunBinary zen2 "Zen2" )
    if !CPU_MODEL! EQU 71 ( call :RunBinary zen2 "Zen2" )
    if !CPU_MODEL! EQU 49 ( call :RunBinary zen2 "Zen2" )

    REM Detect Zen+
    if !CPU_MODEL! EQU 24 ( call :RunBinary zen "Zen+" )
    if !CPU_MODEL! EQU 8 ( call :RunBinary zen "Zen+" )
    
    REM Detect Zen
    if !CPU_MODEL! EQU 32 ( call :RunBinary zen "Zen" )
    if !CPU_MODEL! EQU 24 ( call :RunBinary zen "Zen" )
    if !CPU_MODEL! EQU 17 ( call :RunBinary zen "Zen" )
    if !CPU_MODEL! EQU 1 ( call :RunBinary zen "Zen" )

    echo Detected unknown Ryzen CPU.
    call :RunUnknown "Unknown Ryzen"
  )

  if !CPU_FAMILY! EQU 21 (
    REM Detect Bulldozer
    if !CPU_MODEL! EQU 1 ( call :RunBinary avx "Bulldozer" )
    
    REM Detect Piledriver
    if !CPU_MODEL! EQU 2 ( call :RunBinary avx "Piledriver" )
    if !CPU_MODEL! EQU 17 ( call :RunBinary avx "Piledriver" )
    if !CPU_MODEL! EQU 19 ( call :RunBinary avx "Piledriver" )

    REM Detect Steamroller
    if !CPU_MODEL! EQU 48 ( call :RunBinary avx "Steamroller" )
    if !CPU_MODEL! EQU 56 ( call :RunBinary avx "Steamroller" )
    
    REM Detect Excavator
    if !CPU_MODEL! EQU 96 ( call :RunBinary avx2 "Excavator" )
    if !CPU_MODEL! EQU 101 ( call :RunBinary avx2 "Excavator" )
    if !CPU_MODEL! EQU 112 ( call :RunBinary avx2 "Excavator" )

    echo Detected unknown non-Ryzen CPU.
    call :RunUnknown "Unknown non-Ryzen"
  )
  
  echo Detected unknown AMD CPU.
  call :RunUnknown "Unknown AMD"
)

REM Unknown CPU? use SSE2 to be safe.
echo Detected Unknown CPU - !MANUFACTURER!
echo Detected CPU Caption - !CPUCAPTION!
echo Detected CPU Description - !CPUDESCRIPTION!
call :RunUnknown "Unknown"

:Trim
SetLocal EnableDelayedExpansion
set Params=%*
for /f "tokens=1*" %%a in ("!Params!") do EndLocal & set %1=%%b
exit /b

:RunUnknown
echo Using %USE_UNKNOWN% by default. Change line 11 if CPU was not detected properly.
echo Detected Unknown CPU - !MANUFACTURER!
echo Detected CPU Caption - !CPUCAPTION!
echo Detected CPU Description - !CPUDESCRIPTION!
set CPU_INST="%USE_UNKNOWN%"
call :StartMiner

:RunOverride
echo Detected %1 compatible binary with %2 architecture
echo Change line 11 if CPU was not detected properly.
set CPU_INST="%1"
call :StartMiner

:RunBinary
set CPU_INST="%1"
echo Detected %1 compatible binary with %2 architecture
echo Change line 11 if CPU was not detected properly.
call :StartMiner

:StartMiner
echo If file is "missing" please check if Windows Defender or AV did not block/remove it from binaries folder.
binaries\cpuminer-!CPU_INST!.exe --config=config.json
timeout 5 > NUL
goto StartMiner

:Exit
pause
exit

Tuning:
Tuning starts automaticaly with the start of the miner. If previous tuning file `tune_config`
exists (or `--tune-config=FILE` flag is used), it is used instead. This behavior
can be overridden by `--no-tune` or `--force-tune`.
On non-AVX2 CPUs default tuning process takes ~69 minutes to finish.
On AVX2 CPUs default tuning process takes ~155 minutes to finish.


To add or use options from the miner, use included config.json file.
All options should be presented in JSON format like:
"long-flag-name": "Some_value"

Some examples:
"tune-full": true
"tune-config": "tune_config"
"user": "YOUR_WALLET"

If using non-SSL stratum:
"url": "stratum+tcp://YOUR_POOL_ADDRESS:PORT"
If using SSL stratum:
"url": "stratum+tcps://YOUR_POOL_ADDRESS:PORT"

Help from the miner:
Options:
  -a, --algo=ALGO       specify the algorithm to use
                          gr            Ghost Rider - Raptoreum (RTM)
  -N, --param-n         N parameter for scrypt based algos
  -R, --param-r         R parameter for scrypt based algos
  -K, --param-key       Key (pers) parameter for algos that use it
  -o, --url=URL         URL of mining server
      --url-backup=URL  URL of backup mining server (experimental)
  -O, --userpass=U:P    username:password pair for mining server
  -u, --user=USERNAME   username for mining server
  -p, --pass=PASSWORD   password for mining server
      --cert=FILE       certificate for mining server using SSL
  -x, --proxy=[PROTOCOL://]HOST[:PORT]  connect through a proxy
  -t, --threads=N       number of miner threads (default: number of processors)
  -r, --retries=N       number of times to retry if a network call fails
                          (default: retry indefinitely)
      --retry-pause=N   time to pause between retries, in seconds (default: 30)
      --time-limit=N    maximum time [s] to mine before exiting the program.
  -T, --timeout=N       timeout for long poll and stratum (default: 300 seconds)
  -s, --scantime=N      upper bound on time spent scanning current work when
                          long polling is unavailable, in seconds (default: 5)
      --randomize       Randomize scan range start to reduce duplicates
  -f, --diff-factor     Divide req. difficulty by this factor (std is 1.0)
  -m, --diff-multiplier Multiply difficulty by this factor (std is 1.0)
      --hash-meter      Display thread hash rates
      --coinbase-addr=ADDR  payout address for solo mining
      --coinbase-sig=TEXT  data to insert in the coinbase when possible
      --no-longpoll     disable long polling support
      --no-getwork      disable getwork support
      --no-gbt          disable getblocktemplate support
      --no-stratum      disable X-Stratum support
      --no-extranonce   disable Stratum extranonce support
      --no-redirect     ignore requests to change the URL of the mining server
  -q, --quiet           enable less output
      --no-color        disable colored output
  -D, --debug           enable debug output
  -P, --protocol-dump   verbose dump of protocol-level activities
  -S, --syslog          use system log for output messages
  -B, --background      run the miner in the background
      --benchmark       run in offline benchmark mode
      --cpu-affinity    set process affinity to cpu core(s), mask 0x3 for cores 0 and 1
      --cpu-priority    set process priority (default: 0 idle, 2 normal to 5 highest)
  -b, --api-bind=address[:port]   IP address for the miner API, default port is 4048)
      --api-remote      Allow remote control
      --max-temp=N      Only mine if cpu temp is less than specified value (linux)
      --max-rate=N[KMG] Only mine if net hashrate is less than specified value
      --max-diff=N      Only mine if net difficulty is less than specified value
  -c, --config=FILE     load a JSON-format configuration file
      --data-file       path and name of data file
      --verify          enable additional time consuming start up tests
      --version         display version information and exit
      --log=FILE        path to the file that will include a copy of miner output. File is not cleared after restart.
  -d, --donation=VAL    donation value in %. Default is 1.75
  -y  --no-msr          disable application of MSR mod on the system
      --force-tune      Force tuning of the miner before mining even if tune config file exists.
      --no-tune         disable tuning of the miner before mining. Tuning takes ~69 (non-AVX2) or ~154 (AVX2+) minutes. 
      --tune-full       enable full tuning. Include All 4way Cryptonight variants. Tuning takes ~222 minutes. Only available on AVX2+
      --tune-config=FILE  Point to the already created tune config. Default file created by the miner is tune_config
      --confirm-block   Enable miner to send additional data to the pool regarding sent shares.
      --temp-sensor=PATH  Set custom path to temperature sensor for the miner to use.
      --stress-test     Simple stress test using fast rotation of Ghost Rider. 
      --ecores=N        Specify exact number of E cores on Alder Lake CPU. Defaults to autodetect that can be inaccurate.
      --disable-rot=LIST  Comma (,) separated number of rotations (3,10,16) to be skipped and not mined. For testing purposes.
  -h, --help            display this help text and exit


Information about different binaries and required Processor instructions.
Correct binaries should be selected automaticaly from the provided .sh/.bat script

# Compiled as AMD Zen1 AVX2 SHA
# AMD Zen & Zen+ - 1000 & 2000 series (3000 Mobile)
cpuminer-zen

# Compiled as AMD Zen2 AVX2 SHA
# AMD Zen2 - 3000 (Desktop) & 4000 series
cpuminer-zen2

# Compiled as AMD Zen3 AVX2 SHA VAES
# AMD Zen3 - 5000 series
cpuminer-zen3

# Alder Lake (12th gen, 12000 series) E cores limit to avx2 instead of avx512+
cpuminer-avx2-sha-vaes

# Compiled as Icelake AVX512 SHA VAES
# Ice Lake (10th gen, 10000 series Mobile)
# Rocket Lake (11th gen, 11000 series)
cpuminer-avx512-sha-vaes

# Compiled as Rocket Lake AVX512 SHA AES
?
cpuminer-avx512-sha

# Compiled as Skylake-X AVX512 AES
# Skylake-X/SP/W - HEDT 7000 & 9000 series, Xeon-W, Xeon Bronze/Silver/Gold/Platinum
# Tiger Lake (11th gen, 11000 series Mobile)
cpuminer-avx512

# Compiled as Haswell AVX2 AES
# Haswell (4th gen, 4000 series / 5000 HEDT) - All except i3-4000m, Pentium and Celeron
# Broadwell (5th gen, 5000 series / 6000 HEDT) - All except Pentium and Celeron
# Skylake (6th gen, 6000 series)
# Kaby Lake (7th gen, 7000 series)
# Coffee Lake (8 & 9th gen, 8000/9000 series)
# Cascade Lake / Cannon Lake (10th gen, 10000 series)
cpuminer-avx2

# Compiled as Sandybridge AVX AES
# Sandybridge (2nd gen, 2000 series / 3000 HEDT) - All i5, i7. Some i3. Xeon v1
# Ivy Bridge (3rd gen, 3000 series / 4000 HEDT) - All i5, i7, Xeon v2
cpuminer-avx

# Compiled as Westmere SSE4.2 AES
# Westmere-EP (1st gen) - Xeon 5600 series
# Clarkdale & Arrandale - All except Celeron, Pentium, i3 and i5-4XXM
cpuminer-aes-sse42

# Compiled as Nehalem SSE4.2
cpuminer-sse42

# Compiled as Core2 SSSE3
cpuminer-ssse3

# Compiled as Generic SSE2
cpuminer-sse2

0 0 2 0 0 0 1 1
0 0 0 0 0 0 1 0
0 0 0 0 0 0 0 0
0 0 2 2 0 0 0 0
0 2 2 2 0 0 1 0
0 1 0 2 0 0 0 0
2 0 2 2 0 0 1 0
2 0 2 2 0 0 1 0
0 0 0 0 0 0 0 0
0 0 0 1 0 0 0 0
0 1 0 0 0 0 0 0
0 2 0 1 0 0 1 1
2 0 0 0 0 0 0 1
1 0 0 0 0 0 0 0
0 0 0 1 0 0 0 0
0 2 0 0 1 0 0 0
2 0 0 2 0 0 0 0
2 0 0 0 1 0 0 0
1 1 0 2 0 0 0 0
1 2 0 1 0 0 1 0
0 0 2 0 0 0 0 1
0 0 2 0 0 0 1 0
0 0 1 0 0 0 1 0
0 1 0 0 0 0 0 1
2 0 0 0 0 0 0 1
0 0 0 0 0 0 0 1
0 2 2 0 0 0 0 0
0 1 2 0 0 0 1 0
1 0 2 0 0 0 1 0
1 0 0 0 0 0 1 0
2 2 2 0 0 0 1 0
2 2 2 0 0 0 1 0
0 0 0 0 1 0 1 0
0 2 0 0 0 0 0 0
2 0 0 0 0 0 0 0
1 0 0 0 0 0 0 0
2 0 0 0 0 0 0 0
1 0 0 0 0 0 0 1
2 2 0 0 0 0 1 0
1 2 0 0 0 0 1 0
